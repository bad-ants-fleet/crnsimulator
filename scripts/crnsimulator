#!/usr/bin/env python
#
# crnsimulator: simulate chemical reaction networks using ODEs
# 
# Written by Stefan Badelt (badelt@caltech.edu).
#
# Use at your own risk. 
#
#

import os
import sys
import imp
import argparse

from crnsimulator import ReactionGraph
from crnsimulator.odelib_template import add_integrator_args
from crnsimulator.crn_parser import parse_crn_string, parse_crn_file

def main(args):
  """Translate a CRN into a system of ODEs. Optional: Simulate ODEs on-the-fly. """

  # ********************* #
  # ARGUMENT PROCESSING 1 #
  # ..................... #
  filename = args.output + '.py' if args.output[-3:] != '.py' else args.output
  odename = 'odesystem'

  input_crn = sys.stdin.readlines()
  input_crn = "".join(input_crn)
  crn, species = parse_crn_string(input_crn)

  # Split CRN into irreversible reactions
  new = []
  for [r, p, k] in crn :
    if None in k :
      print Warning('# Set missing rates to 1.')
      k[:] = [x if x != None else 1 for x in k]

    if len(k) == 2:
      new.append([r,p,k[0]])
      new.append([p,r,k[1]])
    else :
      new.append([r,p,k[0]])
  crn = new

  # **************** #
  # WRITE ODE SYSTEM #
  # ................ #
  if not args.force and os.path.exists(args.output):
    print Warning('# Reading ODE system from existing file:', args.output)
  else :
    # ******************* #
    # BUILD REACTIONGRAPH #
    # ................... #
    RG = ReactionGraph(crn)

    # ********************* #
    # PRINT ODE TO TEMPLATE #
    # ..................... #
    filename, odename = RG.write_ODE_lib(sorted_vars=sorted(RG.species), 
            jacobian = not args.no_jacobian, filename = filename,
            odename = odename)
    print '# Wrote ODE system:', filename

  # ******************* #
  # SIMULATE ODE SYSTEM #
  # ................... #
  if args.dryrun :
    print '# Dryrun: Simulate the ODE system using:'
    print "#  python {} --help ".format(filename)
  else :
    print '# Simulating the ODE system, change parameters using:'
    print "#  python {} --help ".format(filename)

    _temp = imp.load_source(odename, filename)
    integrate = getattr(_temp, 'integrate')

    # ********************* #
    # ARGUMENT PROCESSING 2 #
    # ..................... #
    integrate(args)

  return

if __name__ == '__main__':
  parser = argparse.ArgumentParser(
          formatter_class=argparse.ArgumentDefaultsHelpFormatter)

  parser.add_argument("--force", action='store_true',
      help="Overwrite existing files")
  parser.add_argument("--dryrun", action='store_true',
      help="Do not run the simulation, only write the files.")
  parser.add_argument("-o", "--output", default='odesystem', metavar='<str>',
      help="Name of ODE library files.")
  parser.add_argument("--no-jacobian", action='store_true',
      help="Do not compute the Jacobi-Matrix.")

  add_integrator_args(parser)

  args = parser.parse_args()

  main(args)

