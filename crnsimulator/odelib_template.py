# autogenerated script from crnsimulator.writeODElib()

# Do not modify this file. It contains a system of hardcoded ODEs together with
# a set of default parameters. If you need adaptations, edit the source directly
# at "crnsimulator.odelib_template".

# call with: python ./#<&>ODENAME<&># [options]

# coded by Stefan Badelt (badelt@dna.caltech.edu)

import argparse
import numpy as np
from scipy.integrate import odeint
from crnsimulator.solver import add_integrator_args, ode_plotter

rates = {
#<&>RATES<&>#
  }

#<&>ODECALL<&>#

#<&>JACOBIAN<&>#

def integrate():
  parser = argparse.ArgumentParser(
          formatter_class=argparse.ArgumentDefaultsHelpFormatter)

  add_integrator_args(parser)
  args = parser.parse_args()
  #<&>SORTEDVARS<&>#

  if not args.p0 :
    for e, v in enumerate(svars, 1) :
      print e, v
    raise SystemExit('please specify the initial concentration vector' + \
        'with --p0, e.g.: --p0 1=1 --p0 2=0.005 3=1e-6')
  else :
    p0 = [0] * len(svars)
    for term in args.p0 :
      p,o = term.split('=')
      p0[int(p)-1] = float(o)
  print '# Initial concentrations:', zip(svars,p0)

  if False :
    time = [0, args.t0]
    while time[-1] < args.t8 :
      time.append(time[-1]*args.ti)
  else :
    time = np.linspace(args.t0, args.t8, args.t8)

  ny = odeint(#<&>ODENAME<&>#, 
      p0, time, (None, ), #<&>JCALL<&>#,
      atol=args.atol, rtol=args.rtol, mxstep=args.mxstep).T

  if args.nxy :
    for i in zip(time, *ny):
      print ' '.join(map("{:.9e}".format, i))

  if not args.noplot :
    ode_plotter(args.name, time, ny, svars, log=False)
  
if __name__ == '__main__':
  integrate()

