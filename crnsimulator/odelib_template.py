# autogenerated script from crnsimulator.writeODElib()

# Do not modify this file. It contains a system of hardcoded ODEs together with
# a set of default parameters. If you need adaptations, edit the source directly
# at "crnsimulator.odelib_template".

# call with: python ./#<&>ODENAME<&># [options]

# coded by Stefan Badelt (badelt@dna.caltech.edu)

import argparse
import numpy as np
from scipy.integrate import odeint

rates = {
#<&>RATES<&>#
  }

#<&>ODECALL<&>#

def sim_args():
  """Simulation Aruments """
  parser = argparse.ArgumentParser(
          formatter_class=argparse.ArgumentDefaultsHelpFormatter)

  parser.add_argument("--name", default="#<&>ODENAME<&>#",
      help="Import a CRN directly from crnsimulator.sample_crns")
  parser.add_argument("--nxy", action='store_true',
      help="Print time course in nxy format.")

  parser.add_argument("--p0", nargs='+', #default=['1=1'],
      help="Initial species concentration.")
  parser.add_argument("--t0", type=float, default=1e-6,
      help="First time point of the printed time-course")
  parser.add_argument("--ti", type=float, default=1.02,
      help="Output-time increment of solver (t1 * ti = t2)")
  parser.add_argument("--t8", type=float, default=10000,
      help="Simulation time after transcription")
  return parser.parse_args()

def integrate():
  args = sim_args()

  #<&>SORTEDVARS<&>#

  if not args.p0 :
    for e, v in enumerate(svars, 1) :
      print e, v
    raise SystemExit('please specify the initial concentration vector' + \
        'with --p0, e.g.: --p0 1=1 --p0 2=0.005 3=1e-6')
  else :
    p0 = [0] * len(svars)
    for term in args.p0 :
      p,o = term.split('=')
      p0[int(p)-1] = float(o)
  print '# Initial concentrations:', zip(svars,p0)

  time = np.linspace(0, 1000, 1000)
  ny = odeint(#<&>ODENAME<&>#, 
      p0, time, (None, )).T

  if args.nxy :
    for i in zip(time, *ny):
      print ' '.join(map("{:.9e}".format, i))

if __name__ == '__main__':
  integrate()

